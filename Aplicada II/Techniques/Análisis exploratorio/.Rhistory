library("gmodels")
library("ggplot2")
library("vcd")
library("agricolae")
library("grid")
library("tidyverse")
data = iris
data
table2d_summary(data)
table(data)
table(data$Species)
prop.table(data$Species)
table.freq(data$Species)
table.freq(data)
library(tidyverse)
library(ggplot2)
View(data)
ggplot(iris) +
geom_point(aes(data$Sepal.Length,data$Petal.Length))
ggplot(iris) +
geom_jitter(aes(data$Sepal.Length,data$Petal.Length))
ggplot(iris) +
geom_jitter(aes(data$Sepal.Length,data$Petal.Length, colot = Species)) +
geom_smooth(aes(data$Sepal.Length,data$Petal.Length))
ggplot(iris) +
geom_jitter(aes(data$Sepal.Length,data$Petal.Length, color = Species)) +
geom_smooth(aes(data$Sepal.Length,data$Petal.Length, color = Species))
# Paquetes
library(factoextra)
library(cluster)
library(StatMatch)
library(corrplot)
library(ade4)
library(fpc)
library(dplyr)
library(DataExplorer)
library(funModeling)
library(aplpack)
library(TeachingDemos)
library(DescTools)
library(ggplot2)
library(tidyr)
#--------------------------------------------------------------
# Lectura de los datos
datos <- iris
attach(datos)
str(datos)
my_data <- data
# Visualizando la estructura de los datos
str(my_data)
# Visualizando los primeros 5 registros
head(my_data, n = 5)
# Visualizando los últimos 5 registros
tail(my_data, n = 5)
summary(my_data)
#--------------------------------------------------------------
library(DataExplorer)
# Estructura de los datos
plot_str(my_data)
# Detectando y graficando los % de datos perdidos
plot_missing(my_data)
# Histograma para las variables numéricas
plot_histogram(my_data)
#--------------------------------------------------------------
library(funModeling) # Pablo Casas  Libro Vivo de Ciencia de Datos
# Descripción de los datos
df_status(my_data)
# Gráfico de variables numéricas
plot_num(my_data)
# Descripción de las variables numéricas
profiling_num(my_data)
# Para estandarizar los datos (center y scale)
datos.e <- as.data.frame(scale(my_data))
my_data <- data[,-5]
# Visualizando la estructura de los datos
str(my_data)
# Visualizando los primeros 5 registros
head(my_data, n = 5)
# Visualizando los últimos 5 registros
tail(my_data, n = 5)
summary(my_data)
#--------------------------------------------------------------
library(DataExplorer)
# Estructura de los datos
plot_str(my_data)
# Detectando y graficando los % de datos perdidos
plot_missing(my_data)
# Histograma para las variables numéricas
plot_histogram(my_data)
# Para estandarizar los datos (center y scale)
datos.e <- as.data.frame(scale(my_data))
str(datos.e)
#--------------------------------------------------------------
# 1.a Calculando la matriz de distancia euclidiana
#     con la funcion dist()
dist.eucl <- dist(datos.e, method = "euclidean")
# Visualizando un subconjunto de la matriz de distancia
round(as.matrix(dist.eucl)[1:6, 1:6], 1)
library(cluster)
dist.eucl2 <- daisy(datos.e, metric= "euclidean")
# Visualizando un subconjunto de la matriz de distancia
round(as.matrix(dist.eucl2)[1:6, 1:6], 1)
# 1.c Calculando la matriz de distancia euclidiana con la
#     funcion get_dist()
library(factoextra)
res.dist <- get_dist(my_data, stand = TRUE,
method = "euclidean")
# Visualizando un subconjunto de la matriz de distancia
round(as.matrix(res.dist)[1:6, 1:6], 1)
#--------------------------------------------------------------
# 2.a Visualizando la matriz de distancia con fviz_dist()
fviz_dist(res.dist)
fviz_dist(res.dist,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
# 2.b Visualizando la matriz de distancia con corrplot()
library(corrplot)
corrplot(as.matrix(dist.eucl),
is.corr = FALSE,
method = "color")
# 2.c Visualizando solo el triangulo superior
corrplot(as.matrix(dist.eucl), is.corr = FALSE,
method = "color",
order="hclust", type = "upper")
#--------------------------------------------------------------
# Calculando la matriz de disimilaridad
# usando la distancia euclidiana
d <- dist(datos.e, method = "euclidean")
as.matrix(d)[1:6, 1:6]
#--------------------------------------------------------------
# Cluster Jerarquico usando el método de enlace Ward
res.hc <- hclust(d, method = "ward.D2" )
res.hc
str(res.hc)
# Proceso de agrupamiento indicando los individuos
res.hc$merge
# Proceso de agrupamiento indicando los distancias
head(res.hc$height)
tail(res.hc$height)
#--------------------------------------------------------------
# Visualizar el dendrograma
plot(res.hc, cex = 0.6, hang=-1)  # Opciones ó Argumentos
rect.hclust(res.hc, k = 3, border = 2:5) # De segundo nivel
# Dendograma con el paquete factoextra
library(factoextra)
fviz_dend(res.hc, cex = 0.5)
# Dendrograma sin etiquetas
hcd <- as.dendrogram(res.hc)
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19),
cex = 0.7, col = "blue")
plot(hcd, ylab = "Height",
nodePar = nodePar,
leaflab = "none")
# Dendrograma Horizontal
plot(hcd,  xlab = "Height",
nodePar = nodePar, horiz = TRUE)
# Cambiando los colores
plot(hcd,  xlab = "Height", nodePar = nodePar,
edgePar = list(col = 2:3, lwd = 2:1))
# Dendrograma Triangular
plot(hcd, type = "triangle", ylab = "Height")
# Calcular la distancia cophentic
res.coph <- cophenetic(res.hc)
# Correlacion entre la distancia cophenetic distance
# y la distancia original
cor(d, res.coph)
res.hc2 <- hclust(d, method = "average")
cor(d, cophenetic(res.hc2))
res.hc3 <- hclust(d, method = "complete")
cor(d, cophenetic(res.hc3))
#--------------------------------------------------------------
# Dividir en 3 clusters
grp <- cutree(res.hc, k = 3)
grp
library(factoextra)
fviz_dend(res.hc, k=3, cex = 0.5,
k_colors = rainbow(3),   # Colores del arco iris
color_labels_by_k = TRUE,
rect=TRUE)
fviz_cluster(list(data = datos.e, cluster = grp),
palette = c("#2E9FDF",  "#E7B800", "#FC4E07"),
ellipse.type = "convex", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
show.clust.cent = FALSE, ggtheme = theme_minimal())
# Junta el archivo de datos con la columna de cluster
datos.j <- cbind(datos.e,grp)
str(datos.j)
datos.j$grp <- factor(datos.j$grp)
str(datos.j)
library(cluster)
res.agnes <- agnes(x = my_data,          # matriz de datos
stand = TRUE,         # estandariza los datos
metric = "euclidean", # métrica de distancia
method = "ward"       # método de enlace
)
fviz_dend(res.agnes, cex = 0.6, k = 3)
grp <- cutree(res.agnes, k = 3)
fviz_cluster(list(data = datos.e, cluster = grp),
palette = c("#2E9FDF",  "#E7B800", "#FC4E07"),
ellipse.type = "convex", # Concentration ellipse
repel = F, # Avoid label overplotting (slow)
show.clust.cent = FALSE, ggtheme = theme_minimal())
