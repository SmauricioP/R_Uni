system <- list(consumo = cns, inversion = inv,
salario = sal)
systemfit(system, method = "2SLS", inst = inst , data = data)
systemfit(system, method = "2SLS",
data = list(), inst = inst , data = data)
cns <- c ~ p + w
inv <- i ~ p + lag(p,1) + lag(k,1)
sal <- wp ~ y + lag(y,1) + yr
inst <- ~ t + wg + g
system <- list(consumo = cns, inversion = inv,
salario = sal)
systemfit(system, method = "2SLS",
data = list(), inst = inst , data = data)
systemfit(system, method = "2SLS", inst = inst , data = data)
systemfit(system, method = "2SLS", inst = inst , data = list(names(data)))
cns <- c ~ p + w
inv <- i ~ p + lag(p,1) + lag(k,1)
sal <- wp ~ y + lag(y,1) + yr
inst <- ~ t + wg + g
system <- list(consumo = cns, inversion = inv,
salario = sal)
systemfit(system, method = "2SLS", inst = inst , data = list(names(data)))
names(data)
systemfit(system, method = "2SLS", inst = inst , data = list(names(data)))
systemfit(system, method = "2SLS", inst = inst , data = list(data))
systemfit(system, method = "2SLS", inst = inst , data = list(data))
systemfit(system, method = "2SLS", inst = inst , data = data)
View(data)
inst1 <- w ~ t + wg + g
inst2 <- p ~ t + wg + g
inst3 <- y ~ t + wg + g
inst <- list(inst1, inst2, inst3)
systemfit(system, method = "2SLS", inst = inst , data = data)
restric
restric <- c("y-c-i-g-wg = 0",
"p-y+t+wp = 0",
"k-lag(k,1)-i = 0")
systemfit(system, method = "2SLS", inst = inst , data = data,
restrict.matrix = restric)
restrict <- c("y-c-i-g-wg = 0",
"p-y+t+wp = 0",
"k-lag(k,1)-i = 0")
cns <- c ~ p + w
inv <- i ~ p + lag(p,1) + lag(k,1)
sal <- wp ~ y + lag(y,1) + yr
inst <- ~ t + wg + g
system <- list(consumo = cns, inversion = inv,
salario = sal)
restrict <- c("y-c-i-g-wg = 0",
"p-y+t+wp = 0",
"k-lag(k,1)-i = 0")
systemfit(system, method = "2SLS", inst = inst , data = data,
restrict.matrix = restrict)
rm(list = ls)
rm(list = ls())
data <- read_csv("data/klein2.csv")
############################################################################
## Modelo a estimar ##
# Se ha visto en clase que Klein plantea el siguiente modelo:
#################################
# Regresiones:                  #
# C_t  ~ p_t + w                #
# I_t  ~ p_t + p_{t-1} + K_t    #
# Wp_t ~ Y_t + Y_{t-1} + t      #
#                               #
# Identidades:                  #
# Y_t = C_t + I_t + G_t - Wg_t  #
# p_t = Y_t - Tx_t - Wp_t       #
# K_t = K_{t-1} + I_t           #
#################################
# Variables endógenas: C_t, I_t, Wp_t, Y_t, p_t, K_t
# Variables exógenas: w, p_{t-1}, Y_{t-1}, t, G_t, Wg_t, Tx_t, K_{t-1}
## Ecuaciones ##
cns <- c ~ p + w
inv <- i ~ p + lag(p,1) + lag(k,1)
sal <- wp ~ y + lag(y,1) + yr
inst <- ~ t + wg + g
system <- list(consumo = cns, inversion = inv,
salario = sal)
systemfit(system, method = "2SLS", inst = inst , data = data,
restrict.matrix = restrict)
systemfit(system, method = "2SLS", inst = inst , data = data)
systemfit(system, method = "3SLS", inst = inst , data = data)
systemfit(system, method = "2SLS", inst = inst , data = data)
matrix(0,2,7)
matrix(0,3,11)
a <- matrix(0,3,11)
cns <- c ~ p + w
inv <- i ~ p + lag(p,1) + lag(k,1)
sal <- wp ~ y + lag(y,1) + yr
inst <- ~ t + wg + g
system <- list(consumo = cns, inversion = inv,
salario = sal)
systemfit(system, method = "2SLS", inst = inst , data = data)
system <- list(consumo = cns, inversion = inv,
salario = sal)
systemfit(system, method = "2SLS", inst = inst , data = data)
a
names(data)
a <- matrix(0,3,12)
a[1,9]
a[1,9] = 1
a[1,2] = -1
a[1,7] = -1
a[1,10] = -1
a[1,5] = 1
a
names(data)
a[2,3] = 1
a[2,9] = -1
a[2,11] = 1
a[2,4] = 1
a
a[2,4] = 1
systemfit(system, method = "2SLS", inst = inst , data = data)
a <- matrix(0,3,11)
a[1,9] = 1
a[1,12323] = 1
rm(a)
?formula
as.formula(id1)
id1 <- y ~ c + i + g - wg
as.formula(id1)
A <- matrix(c(1,-1,0,0,1,0,0,0,1),3,3)
A
det(A)
solve(A)
B <- matrix(c(1,0,0,1,0,1,1,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,1),3,7)
B
solve(A) %*% B
A <- matrix(c(1,-1,0,0,1,0,0,0,1),3,3)
B <- matrix(c(1,0,0,1,0,1,1,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,1),3,7)
C <- solve(A) %*% B
C
C <- solve(A) %*% B # Matriz con las combinaciones de las variables Y_t, p_t y
C                    # K_t en función del resto.
A
B <- matrix(c(1,0,0,1,0,1,1,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,1),3,7)
B
A <- matrix(c(1,-1,0,0,1,0,0,0,1),3,3, dimnames = list(NULL, c(1,1,2,2,3,3,4)))
A <- matrix(c(1,-1,0,0,1,0,0,0,1),3,3, dimnames = list(NULL, c(1,1,2,4)))
A <- matrix(c(1,-1,0,0,1,0,0,0,1),3,3, dimnames = list(NULL, c(1,1,2)))
A
A <- matrix(c(1,-1,0,0,1,0,0,0,1),3,3)
B <- matrix(c(1,0,0,1,0,1,1,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,1),3,7,
dimnames = list(NULL,c("Ct","It","Gt","Wg","T","Wp","K-1")))
B
C <- solve(A) %*% B # Matriz con las combinaciones de las variables Y_t, p_t y
C
lm(c ~ i + y, data)
lm(c ~ I(i+y), data)
data[,"xd"] = data[,i] + data[,y]
data[,"xd"] = data[,"i"] + data[,"y"]
lm(c ~ xd, data)
ata <- read_csv("data/klein2.csv")
############################################################################
## Modelo a estimar ##
# Se ha visto en clase que Klein plantea el siguiente modelo:
###########################################
# Regresiones:
# C_t  = a0 + a1*p_t + a_2*w
# I_t  = a3 + a4*p_t + a5*p_{t-1} + a6*K_t
# Wp_t = a7 + a8*Y_t + a9*Y_{t-1} + a10*t
#
# Identidades:
# Y_t = C_t + I_t + G_t - Wg_t
# p_t = Y_t - Tx_t - Wp_t
# K_t = K_{t-1} + I_t
###########################################
# Variables endógenas: C_t, I_t, Wp_t, Y_t, p_t, K_t
# Variables exógenas: w, p_{t-1}, Y_{t-1}, t, G_t, Wg_t, Tx_t, K_{t-1}
# Para incluír las identidades en el modelo, se pueden expresar las variables
# del lado izquierdo en función del resto de las variables del lado derecho.
# Así, se resuelve el sistema de ecuaciones formado por las identidades:
# Restricciones de identidad
A <- matrix(c(1,-1,0,0,1,0,0,0,1),3,3)
B <- matrix(c(1,0,0,1,0,1,1,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,1),3,7,
dimnames = list(NULL,c("Ct","It","Gt","Wg","T","Wp","K-1")))
C <- solve(A) %*% B # Matriz con las combinaciones de las variables Y_t, p_t y
C                    # K_t en función del resto.
# De esta manera, reemplazando en las ecuaciones de regresión, tenemos lo
# siguiente:
#################################
# Regresiones:
# (1- a1)*C_t = a0 + a1*(I_t + G_t - W - T)
# (1-a4-a6)*I_t  = a3 + a4*(C_t + G_t - W - T) + a5*p_{t-1} + a6*K_{t-1}
# Wp_t ~ Y_t + Y_{t-1} + t
## Ecuaciones ##
rm(list = ls())
data <- read_csv("data/klein2.csv")
############################################################################
## Modelo a estimar ##
# Se ha visto en clase que Klein plantea el siguiente modelo:
###########################################
# Regresiones:
# C_t  = a0 + a1*p_t + a_2*w
# I_t  = a3 + a4*p_t + a5*p_{t-1} + a6*K_t
# Wp_t = a7 + a8*Y_t + a9*Y_{t-1} + a10*t
#
# Identidades:
# Y_t = C_t + I_t + G_t - Wg_t
# p_t = Y_t - Tx_t - Wp_t
# K_t = K_{t-1} + I_t
###########################################
# Variables endógenas: C_t, I_t, Wp_t, Y_t, p_t, K_t
# Variables exógenas: w, p_{t-1}, Y_{t-1}, t, G_t, Wg_t, Tx_t, K_{t-1}
# Para incluír las identidades en el modelo, se pueden expresar las variables
# del lado izquierdo en función del resto de las variables del lado derecho.
# Así, se resuelve el sistema de ecuaciones formado por las identidades:
# Restricciones de identidad
A <- matrix(c(1,-1,0,0,1,0,0,0,1),3,3)
B <- matrix(c(1,0,0,1,0,1,1,0,0,-1,0,0,0,-1,0,0,-1,0,0,0,1),3,7,
dimnames = list(NULL,c("Ct","It","Gt","Wg","T","Wp","K-1")))
C <- solve(A) %*% B # Matriz con las combinaciones de las variables Y_t, p_t y
C                    # K_t en función del resto.
# De esta manera, reemplazando en las ecuaciones de regresión, tenemos lo
# siguiente:
#################################
# Regresiones:
# (1- a1)*C_t = a0 + a1*(I_t + G_t - W - T)
# (1-a4-a6)*I_t  = a3 + a4*(C_t + G_t - W - T) + a5*p_{t-1} + a6*K_{t-1}
# Wp_t ~ Y_t + Y_{t-1} + t
cns <- c ~ I(i + g - w - t)
inv <- i ~ I(c + g - w - t) + lag(p,1) + lag(k,1)
sal <- wp ~ I(c + i + g - wg) + lag(y,1) + yr
inst <- ~ t + wg + g
system <- list(consumo = cns, inversion = inv,
salario = sal)
systemfit(system, method = "2SLS", inst = inst , data = data)
fit <- systemfit(system, method = "2SLS", inst = inst , data = data)
fit$coefficients
fit$coefficients[2]
polyroot(c(1,2,3))
polyroot(c(1,-2,1))
polyroot(c(1,-fit$coefficients[2],fit$coefficients[2]))
1-1/(1+fit$coefficients[2])
1-1/(1+fit$coefficients[2])
fit$coefficients[2]
(1+fit$coefficients[2])
1/(1+fit$coefficients[2])
1-1/(1+fit$coefficients[2])
cns <- c ~ I(i + g - w - t)
inv <- i ~ I(c + g - w - t) + lag(p,1) + lag(k,1)
sal <- wp ~ I(c + i + g - wg) + lag(y,1) + yr
inst <- ~ t + wg + g
system <- list(consumo = cns, inversion = inv,
salario = sal)
fit <- systemfit(system, method = "2SLS", inst = inst , data = data)
fit
1-1/(1+fit$coefficients[2])
f <- 1-1/(1+fit$coefficients[2])
f/(1+f)
f/(1-f)
f <- 1-1/(1+fit$coefficients[2])
f
cns <- c ~ I(c + i + g - w - t)
inv <- i ~ I(c + i + g - w - t) + lag(p,1) + lag(k,1)
sal <- wp ~ I(c + i + g - wg) + lag(y,1) + yr
inst <- ~ t + wg + g
system <- list(consumo = cns, inversion = inv,
salario = sal)
fit <- systemfit(system, method = "2SLS", inst = inst , data = data)
fit
Kmenta
?systemfit
?Kmenta
systemfit::Kmenta
data("Kmenta")
View(Kmenta)
data
"Kmenta"
Kmenta
rm(list = ls())
Kmenta
systemfit::Kmenta
data <- data("Kmenta")
View(Kmenta)
data("Kmenta")
rm(list = ls())
data("Kmenta")
?systemfit
?kmenta
?Kmenta
Kmenta
dmd <- consump ~ price + income
oft  <- consump ~ price + farmPrice + trend
inst <- ~ income + farmPrice + trend # Las instrumentales, exógenas
system <- list(Demanda = dmd, Oferta = oft)
fit <- systemfit(system, method = "2SLS", inst = inst , data = Kmenta)
fit
# Si queremos utilizar un método de estimación limitada (Pichihua, p. 240), se
# utilizarán MC2E.
fit <- systemfit(system, method = "3SLS", inst = inst , data = Kmenta)
fit
red1 <- lm(consump ~ income + farmprice + trend, Kmenta)
red1 <- lm(consump ~ income + farmPrice + trend, Kmenta)
red2 <- lm(price ~ income + farmPrice + trend, Kmenta)
red1$fitted.values
as.numeric(red1$fitted.values)
Kmenta[,"cons_fit"] = as.numeric(red1$fitted.values)
Kmenta[,"price_fit"] = as.numeric(red2$fitted.values)
Kmenta
fit1_mc2e <- lm(consump ~ price_fit + income, Kmenta)
fit2_mc2e <- lm(consump ~ price_fit + farmPrice + trend, Kmenta)
fit1_mc2e
systemfit(system, method = "2SLS", data = Kmenta)
systemfit(system, method = "2SLS", inst = inst, data = Kmenta)
fit1_mc2e
fit2_mc2e
fit_mc3e <- systemfit(system, method = "3SLS", inst = inst, data = Kmenta)
fit_mc3e
fit_mc2e
fit_mc2e <- systemfit(system, method = "2SLS", inst = inst, data = Kmenta)
fit_mc2e
res1 <- fit1_mc2e$residuals
res2 <- fit2_mc2e$residuals
cor(res1,res2)
source('~/R docs/UNALM/Econ. interm/MES.R', encoding = 'UTF-8', echo=TRUE)
res1
cor(t(res1),t(res2))
cor(res1,res2)
?systemfit
kronecker(3,matrix(c(1,2,3,1),2,2))
cor(c(res1,res2),c(res1,res2))
res1
res1 <- as.numeric(fit1_mc2e$residuals)
res2 <- as.numeric(fit2_mc2e$residuals)
cbind(res1,res2)
cov(cbind(res1,res2))
cov_mat <- cov(cbind(res1,res2))
install.packages("gls")
install.packages("nlme")
library(nlme)
?nlme
library(nlme)      # Estimación por MCG
?gls
cov(cbind(res1,res2))
sigma <- solve(cov_mat)
sigma
sigma <- as.matrix(solve(cov_mat))
sigma
sigma <- kronecker(solve(cov_mat), diag(2))
sigma
fit_mc3e
gls(consumption ~ price + income + farmPrice + trend, correlation = sigma)
gls(consumption ~ price + income + farmPrice + trend, correlation = sigma,
data = Kmenta)
sigma
?systemfit
sigma
sigma <- cov(cbind(res1,res2))
sg_krk_id <- kronecker(solve(cov_mat), diag(2))
sg_krk_id <- kronecker(solve(cov_mat), diag(20))
sg_krk_id
sg_krk_id <- kronecker(solve(cov_mat), diag(20))
sg_krk_id
sigma
sigma
solve(cov_mat)
X1 <- matrix(c(Kmenta$price_fit,Kmenta$income))
X1
model.matrix(consump ~ price_fit + income, Kmenta)
model.matrix(price ~ price_fit + income, Kmenta)
model.matrix( ~ price_fit + income, Kmenta)
X1 <- model.matrix(~ price_fit + income, Kmenta)
X2 <- model.matrix(~ price_fit + farmPrice + trend, Kmenta)
X_matrix(c(X1,X2))
X <- matrix(c(X1,X2))
X
X <- matrix(c(X1,X2),40,7)
X
zero
zero1 <- matrix(0,20,4)
zero2 <- matrix(0,20,3)
X <- matrix(c(X1,zero1,X2,zero2),40,7)
X
X1
X <- matrix(c(X1[,1]))
X
X <- matrix(c(X1,zero1,X2,zero2),40,7, byrow = TRUE)
X
matrix(c(X1[,1]))
matrix(c(X1[,1],X1[,2],X1[,3]),20,3)
matrix(c(X1[,1],X1[,2],X1[,3],zero1),20,7)
matrix(c(X1,zero1),20,7)
rbind(matrix(c(X1,zero1),20,7),matrix(c(X1,zero1),20,7))
rbind(matrix(c(X1,zero1),20,7),matrix(c(zero2,X2),20,7))
X <- rbind(matrix(c(X1,zero1),20,7),matrix(c(zero2,X2),20,7))
dim(X)
dim(sg_krk_id)
solve(t(X) %*% sg_krk_id %*% X)
rep(Kmenta$consump,2)
y <- rep(Kmenta$consump)
y <- rep(Kmenta$consump,2)
solve(t(X) %*% sg_krk_id %*% X) %*% (t(X) %*% sg_krk_id) %*% y
fit_mc3e
beta_mc3e <- solve(t(X) %*% sg_krk_id %*% X) %*% (t(X) %*% sg_krk_id) %*% y
fit_mc3e <- systemfit(system, method = "3SLS", inst = inst, data = Kmenta)
coef(fit_mc3e)
fit_mc3e <- systemfit(system, method = "3SLS", inst = inst, data = Kmenta)
coef(fit_mc3e)
beta_mc3e <- solve(t(X) %*% sg_krk_id %*% X) %*% (t(X) %*% sg_krk_id) %*% y
beta_mc3e
?dimnames
dimnames(beta_mc3e)
dimnames(beta_mc3e)
dimnames(beta_mc3e) <- list("XD",NULL)
dimnames(beta_mc3e) <- list(NULL,"XD")
beta_mc3e
dimnames(coef(fit_mc3e))
names(coef(fit_mc3e))
dimnames(beta_mc3e) <- list(NULL, names(coef(fit_mc3e)))
dimnames(beta_mc3e) <- list( names(coef(fit_mc3e)), NULL)
beta_mc3e
coef(fit_mc3e)
coef(fit_mc2e)
?cov
systemfit(list(eq1 = consumption ~ price_fit + income,
eq2 = consumption ~ price_fit + farmPrice + trend),
method = "SUR", data = Kmenta)
systemfit(list(eq1 = consump ~ price_fit + income,
eq2 = consump ~ price_fit + farmPrice + trend),
method = "SUR", data = Kmenta)
coef(fit_mc3e)
beta_mc3e
beta_mc3e
coef(fit_mc3e)
systemfit(list(eq1 = consump ~ price_fit + income,
eq2 = consump ~ price_fit + farmPrice + trend),
method = "SUR", data = Kmenta)
beta_mc3e
?systemfit
fit_mc3e$residCov
sigma
sigma <- fit_mc3e$residCov
sg_krk_id <- kronecker(solve(cov_mat), diag(20))
X1 <- model.matrix(~ price_fit + income, Kmenta)
X2 <- model.matrix(~ price_fit + farmPrice + trend, Kmenta)
zero1 <- matrix(0,20,4)
zero2 <- matrix(0,20,3)
X <- rbind(matrix(c(X1,zero1),20,7),matrix(c(zero2,X2),20,7))
y <- rep(Kmenta$consump,2)
beta_mc3e <- solve(t(X) %*% sg_krk_id %*% X) %*% (t(X) %*% sg_krk_id) %*% y
coef(fit_mc3e)
beta_mc3e
sigma <- fit_mc3e$residCov
sg_krk_id <- kronecker(solve(cov_mat), diag(20))
beta_mc3e <- solve(t(X) %*% sg_krk_id %*% X) %*% (t(X) %*% sg_krk_id) %*% y
beta_mc3e
sigma <- cov(cbind(res1,res2))
sg_krk_id <- kronecker(solve(cov_mat), diag(20))
beta_mc3e <- solve(t(X) %*% sg_krk_id %*% X) %*% (t(X) %*% sg_krk_id) %*% y
beta_mc3e
X
y
X
dim(y)
y <- matrix(rep(Kmenta$consump,2))
beta_mc3e <- solve(t(X) %*% sg_krk_id %*% X) %*% (t(X) %*% sg_krk_id) %*% y
beta_mc3e
fit_mc3e <- systemfit(system, method = "3SLS", inst = inst, data = Kmenta)
coef(fit_mc3e)
systemfit(list(eq1 = consump ~ price_fit + income,
eq2 = consump ~ price_fit + farmPrice + trend),
method = "SUR", data = Kmenta)
fit_mc3e$x*
fit_mc3e$x
fit_mc3e$iter
fit_mc3e$method
fit_mc3e$call
X
beta_mc3e <- solve(t(X) %*% sg_krk_id %*% X) %*% t(X) %*% sg_krk_id %*% y
beta_mc3e
fit_mc3e <- systemfit(system, method = "3SLS", inst = inst, data = Kmenta)
fit_mc3e
coef(fit_mc2e))
coef(fit_mc2e)
dimnames(beta_mc3e) <- list(names(coef(fit_mc2e)))
fit_mc3e <- systemfit(system, method = "3SLS", inst = inst, data = Kmenta)
coef(fit_mc3e)
t(beta_mc3e)
dimnames(beta_mc3e) <- list(NULL,names(coef(fit_mc2e)))
fit_mc3e <- systemfit(system, method = "3SLS", inst = inst, data = Kmenta)
coef(fit_mc3e)
t(beta_mc3e)
dimnames(beta_mc3e) <- list("",names(coef(fit_mc2e)))
fit_mc3e <- systemfit(system, method = "3SLS", inst = inst, data = Kmenta)
coef(fit_mc3e)
t(beta_mc3e)
dimnames(beta_mc3e) <- list(" ",names(coef(fit_mc2e)))
fit_mc3e <- systemfit(system, method = "3SLS", inst = inst, data = Kmenta)
coef(fit_mc3e)
t(beta_mc3e)
dimnames(beta_mc3e) <- list(c(""),names(coef(fit_mc2e)))
fit_mc3e <- systemfit(system, method = "3SLS", inst = inst, data = Kmenta)
coef(fit_mc3e)
t(beta_mc3e)
beta_mc3e
dimnames(beta_mc3e) <- list(c("a"),names(coef(fit_mc2e)))
dimnames(beta_mc3e) <- list("c",names(coef(fit_mc2e)))
dimnames(beta_mc3e)
beta_mc3e
dimnames(beta_mc3e) <- list(names(coef(fit_mc2e)),"")
fit_mc3e <- systemfit(system, method = "3SLS", inst = inst, data = Kmenta)
coef(fit_mc3e)
t(beta_mc3e)
coef(fit_mc3e) - t(beta_mc3e)
t(coef(fit_mc3e))
t(coef(fit_mc3e))
coef(fit_mc3e)
beta_mc3e
t(beta_mc3e)
